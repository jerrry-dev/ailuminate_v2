// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  username          String    @unique
  password          String
  name              String?
  bio               String?
  avatar            String?
  isVerified        Boolean   @default(false)
  verificationToken String?
  resetToken        String?
  resetTokenExpiry  DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  articles    Article[]
  sentMessages     Message[]  @relation("SentMessages")
  receivedMessages Message[]  @relation("ReceivedMessages")
  followers   Follow[]   @relation("Following")
  following   Follow[]   @relation("Follower")
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  name      String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  senderId    String
  sender      User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  recipientId String
  recipient   User     @relation("ReceivedMessages", fields: [recipientId], references: [id], onDelete: Cascade)
  files       File[]

  @@index([senderId])
  @@index([recipientId])
}

model Follow {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())

  // Relations
  followerId String
  follower   User     @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following  User     @relation("Follower", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model File {
  id        String   @id @default(cuid())
  name      String
  url       String
  type      String
  size      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  messageId String?
  message   Message? @relation(fields: [messageId], references: [id], onDelete: Cascade)
  articleId String?

  @@index([messageId])
}

// This is a reference to MongoDB Article model
// We're using a hybrid approach where Article content is in MongoDB
// but we keep a reference in PostgreSQL for relations
model Article {
  id          String   @id @default(cuid())
  mongoId     String   @unique // Reference to MongoDB document ID
  title       String
  slug        String   @unique
  excerpt     String?
  status      String   @default("draft") // draft, published
  viewCount   Int      @default(0)
  likeCount   Int      @default(0)
  commentCount Int     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@index([status])
}
